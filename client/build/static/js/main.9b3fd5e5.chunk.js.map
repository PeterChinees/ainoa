{"version":3,"sources":["components/predictions_interfaces.ts","utils/colors.ts","components/predictions_component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Emotion","Emojis","Colors","Predictions","useState","text","setText","predText","setPredText","isSending","setIsSending","isUpdating","setIsUpdating","predictions","setPredictions","attnWeights","setAttnWeights","getPredictions","useCallback","a","async","textLength","textToSend","length","fetch","URL","method","headers","body","JSON","stringify","response","ok","json","then","r","updatePrediction","id","correct","updated_preds","console","log","applyColorsToWeights","searchWords","includes","DARKEST","DARK","INBETWEEN","LIGHTER","LIGHT","LIGHTEST","Form","Field","TextArea","value","onChange","e","currentTarget","Button","color","disabled","onClick","forEach","weight","push","split","map","i","style","display","marginBottom","marginRight","backgroundColor","DEFAULT","borderRadius","padding","key","marginTop","fontFamily","flexWrap","p","label","ANGER","ANTICIPATION","DISGUST","FEAR","JOY","LOVE","OPTIMISM","PESSIMISM","SADNESS","SURPRISE","TRUST","content","Math","round","Number","EPSILON","List","divided","verticalAlign","Item","Content","floated","basic","animated","filter","visible","hidden","Icon","name","renderPredictions","App","Container","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b3fd5e5.chunk.js","sourcesContent":["export enum Emotion {\n\tANGER = \"pred_anger\",\n\tANTICIPATION = \"pred_anticipation\",\n\tDISGUST = \"pred_disgust\",\n\tFEAR = \"pred_fear\",\n\tJOY = \"pred_joy\",\n\tLOVE = \"pred_love\",\n\tOPTIMISM = \"pred_optimism\",\n\tPESSIMISM = \"pred_pessimism\",\n\tSADNESS = \"pred_sadness\",\n\tSURPRISE = \"pred_surprise\",\n\tTRUST = \"pred_trust\"\n}\n\nexport enum Emojis {\n\tANGER = \"😠\",\n\tANTICIPATION = \"🤫\",\n\tDISGUST = \"🤢\",\n\tFEAR = \"😨\",\n\tJOY = \"😀\",\n\tLOVE = \"❤️\",\n\tOPTIMISM = \"👍\",\n\tPESSIMISM = \"👎\",\n\tSADNESS = \"😢\",\n\tSURPRISE = \"😮\",\n\tTRUST = \"🤞\"\n}\n","export enum Colors {\n\tDARKEST = \"#00518f\",\n\tDARK = \"#0761a6\",\n\tINBETWEEN = \"#0b6eba\",\n\tLIGHTER = \"#1b7fc\",\n\tLIGHT = \"#2f8cd4\",\n\tLIGHTEST = \"#3f9fe8\",\n\tDEFAULT = \"#93c6ed\"\n}\n","import React, { useState, useCallback } from \"react\";\nimport { Emotion } from \"./predictions_interfaces\";\nimport { Form, TextArea, Button, List, Icon } from \"semantic-ui-react\";\nimport { Colors } from \"../utils/colors\";\n\nconst URL: string = \"http://34.255.117.138\";\n\nexport const Predictions: React.FC = () => {\n\tconst [text, setText] = useState(\"\");\n\tconst [predText, setPredText] = useState(\"\");\n\tconst [isSending, setIsSending] = useState(false);\n\tconst [isUpdating, setIsUpdating] = useState(false);\n\tconst [predictions, setPredictions] = useState([]);\n\tconst [attnWeights, setAttnWeights] = useState([]);\n\n\tconst getPredictions = useCallback(async () => {\n\t\tif (isSending) return;\n\n\t\tsetIsSending(true);\n\n\t\tconst textToSend: string = text;\n\t\tconst textLength = textToSend.length;\n\n\t\tif (textToSend !== \"\") {\n\t\t\tconst response: Response = await fetch(URL + \"/predictions\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify([text, textLength])\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tresponse.json().then((r: any[]) => {\n\t\t\t\t\tsetPredictions(r[0]);\n\t\t\t\t\tsetAttnWeights(r[1]);\n\t\t\t\t});\n\t\t\t\tsetPredText(text);\n\t\t\t}\n\n\t\t\tsetText(\"\");\n\t\t\tsetIsSending(false);\n\t\t}\n\t}, [isSending, text]);\n\n\tconst updatePrediction = useCallback(\n\t\tasync (id: string, correct: boolean) => {\n\t\t\tif (isUpdating) return;\n\n\t\t\tsetIsUpdating(true);\n\n\t\t\tlet updated_preds = {\n\t\t\t\tid: id,\n\t\t\t\ttext: predText,\n\t\t\t\tcorrect: correct\n\t\t\t};\n\n\t\t\tconst response: Response = await fetch(URL + \"/update_preds\", {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(updated_preds)\n\t\t\t});\n\n\t\t\tif (response.ok) {\n\t\t\t\tresponse.json().then(r => {\n\t\t\t\t\tconsole.log(r);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tsetIsUpdating(false);\n\t\t},\n\t\t[predText, isUpdating]\n\t);\n\n\tconst handleCorrectPredictionClicked = (id: string) => {\n\t\tupdatePrediction(id, true);\n\t\tsetPredictions(predictions.filter(p => p[0] !== id));\n\n\t\tif (predictions.length <= 1) {\n\t\t\tsetPredText(\"\");\n\t\t}\n\t};\n\n\tconst handleIncorrectPredictionClicked = (id: string) => {\n\t\tupdatePrediction(id, false);\n\t\tsetPredictions(predictions.filter(p => p[0] !== id));\n\n\t\tif (predictions.length <= 1) {\n\t\t\tsetPredText(\"\");\n\t\t}\n\t};\n\n\tconst showLoadingIcon = () => {\n\t\treturn <div>Loading...</div>;\n\t};\n\n\tconst applyColorsToWeights = (searchWords: string[], text: string) => {\n\t\tif (searchWords.includes(text)) {\n\t\t\tif (text === searchWords[0]) {\n\t\t\t\treturn Colors.DARKEST;\n\t\t\t} else if (text === searchWords[1]) {\n\t\t\t\treturn Colors.DARK;\n\t\t\t} else if (text === searchWords[2]) {\n\t\t\t\treturn Colors.INBETWEEN;\n\t\t\t} else if (text === searchWords[3]) {\n\t\t\t\treturn Colors.LIGHTER;\n\t\t\t} else if (text === searchWords[4]) {\n\t\t\t\treturn Colors.LIGHT;\n\t\t\t} else {\n\t\t\t\treturn Colors.LIGHTEST;\n\t\t\t}\n\t\t}\n\t};\n\n\tconst renderPredictions = () => {\n\t\tlet searchWords: string[] = [];\n\t\tattnWeights.forEach(weight => {\n\t\t\tsearchWords.push(weight[0]);\n\t\t});\n\n\t\tlet text: any;\n\n\t\tif (predText) {\n\t\t\ttext = predText.split(\" \").map(function(a, i) {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<div style={{ display: \"flex\", marginBottom: 12 }}>\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tmarginRight: 9,\n\t\t\t\t\t\t\t\t\tbackgroundColor: searchWords.includes(a)\n\t\t\t\t\t\t\t\t\t\t? applyColorsToWeights(searchWords, a)\n\t\t\t\t\t\t\t\t\t\t: Colors.DEFAULT,\n\t\t\t\t\t\t\t\t\tcolor: \"white\",\n\t\t\t\t\t\t\t\t\tborderRadius: 4,\n\t\t\t\t\t\t\t\t\tpadding: 6\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tkey={i}>\n\t\t\t\t\t\t\t\t{a}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t});\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div style={{ marginTop: 36, marginBottom: 12, fontFamily: \"Arial\" }}>\n\t\t\t\t\t<div style={{ display: \"flex\", flexWrap: \"wrap\" }}>{text}</div>\n\t\t\t\t\t{predictions.map((p: any[]) => {\n\t\t\t\t\t\tlet label: string = \"\";\n\t\t\t\t\t\tswitch (p[0]) {\n\t\t\t\t\t\t\tcase Emotion.ANGER:\n\t\t\t\t\t\t\t\tlabel = \"Anger\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.ANTICIPATION:\n\t\t\t\t\t\t\t\tlabel = \"Anticipation\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.DISGUST:\n\t\t\t\t\t\t\t\tlabel = \"Disgust\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.FEAR:\n\t\t\t\t\t\t\t\tlabel = \"Fear\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.JOY:\n\t\t\t\t\t\t\t\tlabel = \"Joy\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.LOVE:\n\t\t\t\t\t\t\t\tlabel = \"Love\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.OPTIMISM:\n\t\t\t\t\t\t\t\tlabel = \"Optimism\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.PESSIMISM:\n\t\t\t\t\t\t\t\tlabel = \"Pessimism\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.SADNESS:\n\t\t\t\t\t\t\t\tlabel = \"Sadness\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.SURPRISE:\n\t\t\t\t\t\t\t\tlabel = \"Surprise\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase Emotion.TRUST:\n\t\t\t\t\t\t\t\tlabel = \"Trust\";\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet content = label + \" --> \" + Math.round(p[1] * 100 + Number.EPSILON) / 100;\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<List divided verticalAlign='middle'>\n\t\t\t\t\t\t\t\t\t<List.Item>\n\t\t\t\t\t\t\t\t\t\t<List.Content floated='right'>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tbasic\n\t\t\t\t\t\t\t\t\t\t\t\tcolor='green'\n\t\t\t\t\t\t\t\t\t\t\t\tanimated\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleCorrectPredictionClicked(p[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button.Content visible>Correct</Button.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button.Content hidden>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Icon name='check' />\n\t\t\t\t\t\t\t\t\t\t\t\t</Button.Content>\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\t\tbasic\n\t\t\t\t\t\t\t\t\t\t\t\tcolor='red'\n\t\t\t\t\t\t\t\t\t\t\t\tanimated\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={e => {\n\t\t\t\t\t\t\t\t\t\t\t\t\thandleIncorrectPredictionClicked(p[0]);\n\t\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button.Content visible>Incorrect</Button.Content>\n\t\t\t\t\t\t\t\t\t\t\t\t<Button.Content hidden>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Icon name='delete' />\n\t\t\t\t\t\t\t\t\t\t\t\t</Button.Content>\n\t\t\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t\t\t</List.Content>\n\t\t\t\t\t\t\t\t\t\t<List.Content>{content}</List.Content>\n\t\t\t\t\t\t\t\t\t</List.Item>\n\t\t\t\t\t\t\t\t</List>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<Form>\n\t\t\t\t<Form.Field>\n\t\t\t\t\t<TextArea\n\t\t\t\t\t\tvalue={text}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tsetText(e.currentTarget.value);\n\t\t\t\t\t\t}}></TextArea>\n\t\t\t\t</Form.Field>\n\t\t\t\t<Form.Field>\n\t\t\t\t\t<Button color={\"twitter\"} disabled={isSending} onClick={async () => getPredictions()}>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</Button>\n\t\t\t\t</Form.Field>\n\t\t\t</Form>\n\t\t\t{isUpdating ? showLoadingIcon() : renderPredictions()}\n\t\t</>\n\t);\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Predictions } from \"./components/predictions_component\";\nimport { Emojis } from \"./components/predictions_interfaces\";\nimport { Container } from \"semantic-ui-react\";\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<>\n\t\t\t<Container style={{ marginTop: 24 }}>\n\t\t\t\t<div style={{ marginBottom: 24 }}>\n\t\t\t\t\t<h1>This AI has been trained to understand emotion from text.</h1>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h4>Emotions are categorized into 11 distinct labels:</h4>\n\t\t\t\t\t\t<p style={{ fontSize: 13 }}>\n\t\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t\tAnger {Emojis.ANGER} -- Anticipation {Emojis.ANTICIPATION} -- Disgust{\" \"}\n\t\t\t\t\t\t\t\t{Emojis.DISGUST} -- Fear {Emojis.FEAR} -- Joy {Emojis.JOY} -- Love {Emojis.LOVE} --\n\t\t\t\t\t\t\t\tOptimism {Emojis.OPTIMISM} -- Pessimism {Emojis.PESSIMISM} -- Sadness --{\" \"}\n\t\t\t\t\t\t\t\t{Emojis.SADNESS} -- Surprise {Emojis.SURPRISE} -- Trust {Emojis.TRUST}\n\t\t\t\t\t\t\t</strong>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p style={{ fontSize: 13 }}>\n\t\t\t\t\t\t\tTeach the AI by marking the correct and incorrect predictions.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Predictions />\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t</>\n\t);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}